// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package v0

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComputeDoubleRequest struct {
	// in version v0alpha1, we just accepted int32s as input
	Input32 int32 `protobuf:"varint,1,opt,name=input32,proto3" json:"input32,omitempty"`
	// but in version v0alpha2, we figured that we might as well also accept int64s!
	// that also prompted deprecating the input32 field, which got dropped altogether in v0alpha4.
	Input64 int64 `protobuf:"varint,2,opt,name=input64,proto3" json:"input64,omitempty"`
	// in version v0alpha3, we thought we should actually accept string inputs instead: the input
	// would just need to be parsable by strconv.ParseInt (yeah, I know, great design);
	// that prompted deprecating using input64, too.
	Input                string   `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeDoubleRequest) Reset()         { *m = ComputeDoubleRequest{} }
func (m *ComputeDoubleRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeDoubleRequest) ProtoMessage()    {}
func (*ComputeDoubleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *ComputeDoubleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeDoubleRequest.Unmarshal(m, b)
}
func (m *ComputeDoubleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeDoubleRequest.Marshal(b, m, deterministic)
}
func (m *ComputeDoubleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeDoubleRequest.Merge(m, src)
}
func (m *ComputeDoubleRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeDoubleRequest.Size(m)
}
func (m *ComputeDoubleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeDoubleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeDoubleRequest proto.InternalMessageInfo

func (m *ComputeDoubleRequest) GetInput32() int32 {
	if m != nil {
		return m.Input32
	}
	return 0
}

func (m *ComputeDoubleRequest) GetInput64() int64 {
	if m != nil {
		return m.Input64
	}
	return 0
}

func (m *ComputeDoubleRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type ComputeDoubleResponse struct {
	// that field is used to reply to clients giving a 32 bits input
	Response32 int32 `protobuf:"varint,1,opt,name=response32,proto3" json:"response32,omitempty"`
	// that field is used to reply to clients giving a 64 bits or string input, starting from v0alpha2
	Response int64 `protobuf:"varint,2,opt,name=response,proto3" json:"response,omitempty"`
	// we didn't realize it at the beginning, but these things can overflow! in that case
	// we need to notify the caller that something went wrong
	// that got introduced in v0alpha2
	Success              bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeDoubleResponse) Reset()         { *m = ComputeDoubleResponse{} }
func (m *ComputeDoubleResponse) String() string { return proto.CompactTextString(m) }
func (*ComputeDoubleResponse) ProtoMessage()    {}
func (*ComputeDoubleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *ComputeDoubleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeDoubleResponse.Unmarshal(m, b)
}
func (m *ComputeDoubleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeDoubleResponse.Marshal(b, m, deterministic)
}
func (m *ComputeDoubleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeDoubleResponse.Merge(m, src)
}
func (m *ComputeDoubleResponse) XXX_Size() int {
	return xxx_messageInfo_ComputeDoubleResponse.Size(m)
}
func (m *ComputeDoubleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeDoubleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeDoubleResponse proto.InternalMessageInfo

func (m *ComputeDoubleResponse) GetResponse32() int32 {
	if m != nil {
		return m.Response32
	}
	return 0
}

func (m *ComputeDoubleResponse) GetResponse() int64 {
	if m != nil {
		return m.Response
	}
	return 0
}

func (m *ComputeDoubleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ComputeDoubleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type TellMeAPoemRequest struct {
	// starting from v0, the user could specify whether they wanted a title to their poem!
	IWantATitle          bool     `protobuf:"varint,1,opt,name=i_want_a_title,json=iWantATitle,proto3" json:"i_want_a_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TellMeAPoemRequest) Reset()         { *m = TellMeAPoemRequest{} }
func (m *TellMeAPoemRequest) String() string { return proto.CompactTextString(m) }
func (*TellMeAPoemRequest) ProtoMessage()    {}
func (*TellMeAPoemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *TellMeAPoemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TellMeAPoemRequest.Unmarshal(m, b)
}
func (m *TellMeAPoemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TellMeAPoemRequest.Marshal(b, m, deterministic)
}
func (m *TellMeAPoemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TellMeAPoemRequest.Merge(m, src)
}
func (m *TellMeAPoemRequest) XXX_Size() int {
	return xxx_messageInfo_TellMeAPoemRequest.Size(m)
}
func (m *TellMeAPoemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TellMeAPoemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TellMeAPoemRequest proto.InternalMessageInfo

func (m *TellMeAPoemRequest) GetIWantATitle() bool {
	if m != nil {
		return m.IWantATitle
	}
	return false
}

type TellMeAPoemResponse struct {
	Poem string `protobuf:"bytes,1,opt,name=poem,proto3" json:"poem,omitempty"`
	// in v0, we started giving back a list of lines instead of just a big blob of a poem. So much more readble!
	Lines                []string `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TellMeAPoemResponse) Reset()         { *m = TellMeAPoemResponse{} }
func (m *TellMeAPoemResponse) String() string { return proto.CompactTextString(m) }
func (*TellMeAPoemResponse) ProtoMessage()    {}
func (*TellMeAPoemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *TellMeAPoemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TellMeAPoemResponse.Unmarshal(m, b)
}
func (m *TellMeAPoemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TellMeAPoemResponse.Marshal(b, m, deterministic)
}
func (m *TellMeAPoemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TellMeAPoemResponse.Merge(m, src)
}
func (m *TellMeAPoemResponse) XXX_Size() int {
	return xxx_messageInfo_TellMeAPoemResponse.Size(m)
}
func (m *TellMeAPoemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TellMeAPoemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TellMeAPoemResponse proto.InternalMessageInfo

func (m *TellMeAPoemResponse) GetPoem() string {
	if m != nil {
		return m.Poem
	}
	return ""
}

func (m *TellMeAPoemResponse) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *TellMeAPoemResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*ComputeDoubleRequest)(nil), "v0.ComputeDoubleRequest")
	proto.RegisterType((*ComputeDoubleResponse)(nil), "v0.ComputeDoubleResponse")
	proto.RegisterType((*TellMeAPoemRequest)(nil), "v0.TellMeAPoemRequest")
	proto.RegisterType((*TellMeAPoemResponse)(nil), "v0.TellMeAPoemResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x2d, 0x3f, 0x0a, 0x17, 0x71, 0x31, 0xa2, 0x8e, 0x2c, 0x4c, 0x53, 0x36, 0xac, 0x08,
	0x01, 0x63, 0xe2, 0x4e, 0x82, 0x31, 0x71, 0x41, 0x42, 0x06, 0x8c, 0xcb, 0x5a, 0xc8, 0x8d, 0x99,
	0xa4, 0xed, 0xd4, 0x99, 0x29, 0xea, 0x6b, 0xf8, 0x02, 0xbe, 0xaa, 0x99, 0xe9, 0x4f, 0x40, 0xd8,
	0xdd, 0xef, 0x4c, 0xe7, 0x9e, 0xd3, 0xd3, 0x42, 0x33, 0x48, 0xf8, 0x20, 0x91, 0x42, 0x0b, 0x52,
	0xd9, 0x0c, 0xbd, 0x37, 0xe8, 0x4c, 0x45, 0x94, 0xa4, 0x1a, 0x1f, 0x45, 0xba, 0x0a, 0x91, 0xe1,
	0x47, 0x8a, 0x4a, 0x13, 0x0a, 0x27, 0x3c, 0x4e, 0x52, 0x3d, 0x1e, 0x51, 0xc7, 0x75, 0xfa, 0x75,
	0x56, 0x60, 0x79, 0x72, 0x77, 0x4b, 0x2b, 0xae, 0xd3, 0xaf, 0xb2, 0x02, 0x49, 0x07, 0xea, 0x76,
	0xa4, 0x55, 0xd7, 0xe9, 0x37, 0x59, 0x06, 0xde, 0x8f, 0x03, 0x17, 0xff, 0x2c, 0x54, 0x22, 0x62,
	0x85, 0xe4, 0x06, 0x40, 0xe6, 0x73, 0x69, 0xb3, 0xa5, 0x90, 0x2e, 0x34, 0x0a, 0xca, 0xad, 0x4a,
	0x36, 0x29, 0x54, 0xba, 0x5e, 0xa3, 0x52, 0xd6, 0xad, 0xc1, 0x0a, 0x24, 0x3d, 0x68, 0xa3, 0x94,
	0x42, 0xfa, 0x11, 0x2a, 0x15, 0xbc, 0x23, 0xad, 0xd9, 0x34, 0xa7, 0x56, 0x9c, 0x65, 0x9a, 0x77,
	0x0f, 0x64, 0x89, 0x61, 0x38, 0xc3, 0xc9, 0x5c, 0x60, 0x54, 0xbc, 0x74, 0x0f, 0xce, 0xb8, 0xff,
	0x19, 0xc4, 0xda, 0x0f, 0x7c, 0xcd, 0x75, 0x88, 0x36, 0x54, 0x83, 0xb5, 0xf8, 0x6b, 0x10, 0xeb,
	0xc9, 0xd2, 0x48, 0xde, 0x0b, 0x9c, 0xef, 0x5c, 0xcd, 0x03, 0x11, 0xa8, 0x25, 0x02, 0x23, 0x7b,
	0xa3, 0xc9, 0xec, 0x6c, 0x0a, 0x09, 0x79, 0x8c, 0x8a, 0x56, 0xdc, 0xaa, 0x29, 0xc4, 0x82, 0x51,
	0xb3, 0xe5, 0x79, 0x4d, 0x16, 0x46, 0xbf, 0x8e, 0xd9, 0xab, 0xf4, 0x74, 0xf1, 0x3c, 0x97, 0xe2,
	0xeb, 0x7b, 0x81, 0x72, 0xc3, 0xd7, 0x48, 0x9e, 0xa0, 0xbd, 0xd3, 0x1e, 0xa1, 0x83, 0xcd, 0x70,
	0x70, 0xe8, 0x9b, 0x75, 0xaf, 0x0f, 0x9c, 0x64, 0xe9, 0xbc, 0x23, 0xf2, 0x00, 0xad, 0xad, 0xd8,
	0xe4, 0xd2, 0x3c, 0xbb, 0x5f, 0x41, 0xf7, 0x6a, 0x4f, 0x2f, 0x36, 0xac, 0x8e, 0xed, 0x5f, 0x33,
	0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x86, 0x2d, 0x5f, 0x61, 0x42, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestCSIProxyServiceClient is the client API for TestCSIProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestCSIProxyServiceClient interface {
	// ComputeDouble computes the double of the input. Real smart stuff!
	// We ended up deprecating this API in v0beta1, and dropping it altogether in v0, because it
	// turned out it wasn't that useful after all... Who could have guessed? Sic transit gloria mundi.
	ComputeDouble(ctx context.Context, in *ComputeDoubleRequest, opts ...grpc.CallOption) (*ComputeDoubleResponse, error)
	// TellMeAPoem returns a very poetic response.
	// It got added in v0alpha3.
	TellMeAPoem(ctx context.Context, in *TellMeAPoemRequest, opts ...grpc.CallOption) (*TellMeAPoemResponse, error)
}

type testCSIProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestCSIProxyServiceClient(cc *grpc.ClientConn) TestCSIProxyServiceClient {
	return &testCSIProxyServiceClient{cc}
}

func (c *testCSIProxyServiceClient) ComputeDouble(ctx context.Context, in *ComputeDoubleRequest, opts ...grpc.CallOption) (*ComputeDoubleResponse, error) {
	out := new(ComputeDoubleResponse)
	err := c.cc.Invoke(ctx, "/v0.TestCSIProxyService/ComputeDouble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCSIProxyServiceClient) TellMeAPoem(ctx context.Context, in *TellMeAPoemRequest, opts ...grpc.CallOption) (*TellMeAPoemResponse, error) {
	out := new(TellMeAPoemResponse)
	err := c.cc.Invoke(ctx, "/v0.TestCSIProxyService/TellMeAPoem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestCSIProxyServiceServer is the server API for TestCSIProxyService service.
type TestCSIProxyServiceServer interface {
	// ComputeDouble computes the double of the input. Real smart stuff!
	// We ended up deprecating this API in v0beta1, and dropping it altogether in v0, because it
	// turned out it wasn't that useful after all... Who could have guessed? Sic transit gloria mundi.
	ComputeDouble(context.Context, *ComputeDoubleRequest) (*ComputeDoubleResponse, error)
	// TellMeAPoem returns a very poetic response.
	// It got added in v0alpha3.
	TellMeAPoem(context.Context, *TellMeAPoemRequest) (*TellMeAPoemResponse, error)
}

// UnimplementedTestCSIProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestCSIProxyServiceServer struct {
}

func (*UnimplementedTestCSIProxyServiceServer) ComputeDouble(ctx context.Context, req *ComputeDoubleRequest) (*ComputeDoubleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeDouble not implemented")
}
func (*UnimplementedTestCSIProxyServiceServer) TellMeAPoem(ctx context.Context, req *TellMeAPoemRequest) (*TellMeAPoemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TellMeAPoem not implemented")
}

func RegisterTestCSIProxyServiceServer(s *grpc.Server, srv TestCSIProxyServiceServer) {
	s.RegisterService(&_TestCSIProxyService_serviceDesc, srv)
}

func _TestCSIProxyService_ComputeDouble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeDoubleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCSIProxyServiceServer).ComputeDouble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.TestCSIProxyService/ComputeDouble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCSIProxyServiceServer).ComputeDouble(ctx, req.(*ComputeDoubleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCSIProxyService_TellMeAPoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TellMeAPoemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCSIProxyServiceServer).TellMeAPoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.TestCSIProxyService/TellMeAPoem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCSIProxyServiceServer).TellMeAPoem(ctx, req.(*TellMeAPoemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestCSIProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v0.TestCSIProxyService",
	HandlerType: (*TestCSIProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeDouble",
			Handler:    _TestCSIProxyService_ComputeDouble_Handler,
		},
		{
			MethodName: "TellMeAPoem",
			Handler:    _TestCSIProxyService_TellMeAPoem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
