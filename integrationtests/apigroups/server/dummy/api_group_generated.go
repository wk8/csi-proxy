// Code generated by csi-proxy-gen. DO NOT EDIT.

package dummy

import (
	"context"

	"google.golang.org/grpc"

	internal "github.com/kubernetes-csi/csi-proxy/integrationtests/apigroups/server/dummy/internal"
	"github.com/kubernetes-csi/csi-proxy/internal/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/server"
)

const name = "dummy"

type VersionedAPI interface {
	Register(grpcServer *grpc.Server)
}

type VersionedAPIFactory func(*Server) VersionedAPI

var versionedAPIFactories = make(map[apiversion.Version]VersionedAPIFactory)

func RegisterVersion(version apiversion.Version, factory VersionedAPIFactory) {
	panic("wtf on register")
	versionedAPIFactories[version] = factory
}

func (s *Server) VersionedAPIs() []*server.VersionedAPI {
	versionedAPIs := make([]*server.VersionedAPI, len(versionedAPIFactories))

	i := 0
	for version, versionedAPIFactory := range versionedAPIFactories {
		versionedServer := versionedAPIFactory(s)
		versionedAPIs[i] = &server.VersionedAPI{
			Group:      name,
			Version:    version,
			Registrant: versionedServer.Register,
		}
		i++
	}

	return versionedAPIs
}

// ensure the server defines all the required methods
type serverInterface interface {
	ComputeDouble(ctx context.Context, request *internal.ComputeDoubleRequest, version apiversion.Version) (*internal.ComputeDoubleResponse, error)
	TellMeAPoem(ctx context.Context, request *internal.TellMeAPoemRequest, version apiversion.Version) (*internal.TellMeAPoemResponse, error)
}

var _ serverInterface = &Server{}
