// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file_system.proto

package file_system

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api "github.com/kubernetes-csi/csi-proxy/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Context of the paths used for path prefix validation
type PathContext int32

const (
	// plugin maps to the configured kubelet-csi-plugins-path path prefix
	PathContext_PLUGIN PathContext = 0
	// container maps to the configured kubelet-pod-path path prefix
	PathContext_CONTAINER PathContext = 1
)

var PathContext_name = map[int32]string{
	0: "PLUGIN",
	1: "CONTAINER",
}

var PathContext_value = map[string]int32{
	"PLUGIN":    0,
	"CONTAINER": 1,
}

func (x PathContext) String() string {
	return proto.EnumName(PathContext_name, int32(x))
}

func (PathContext) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{0}
}

type PathExistsRequest struct {
	// The path to check in the host filesystem.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathExistsRequest) Reset()         { *m = PathExistsRequest{} }
func (m *PathExistsRequest) String() string { return proto.CompactTextString(m) }
func (*PathExistsRequest) ProtoMessage()    {}
func (*PathExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{0}
}

func (m *PathExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathExistsRequest.Unmarshal(m, b)
}
func (m *PathExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathExistsRequest.Marshal(b, m, deterministic)
}
func (m *PathExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathExistsRequest.Merge(m, src)
}
func (m *PathExistsRequest) XXX_Size() int {
	return xxx_messageInfo_PathExistsRequest.Size(m)
}
func (m *PathExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PathExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PathExistsRequest proto.InternalMessageInfo

func (m *PathExistsRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type PathExistsResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*PathExistsResponse_CmdletError
	//	*PathExistsResponse_ErrorMessage
	Error                isPathExistsResponse_Error `protobuf_oneof:"error"`
	Exists               bool                       `protobuf:"varint,4,opt,name=exists,proto3" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PathExistsResponse) Reset()         { *m = PathExistsResponse{} }
func (m *PathExistsResponse) String() string { return proto.CompactTextString(m) }
func (*PathExistsResponse) ProtoMessage()    {}
func (*PathExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{1}
}

func (m *PathExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathExistsResponse.Unmarshal(m, b)
}
func (m *PathExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathExistsResponse.Marshal(b, m, deterministic)
}
func (m *PathExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathExistsResponse.Merge(m, src)
}
func (m *PathExistsResponse) XXX_Size() int {
	return xxx_messageInfo_PathExistsResponse.Size(m)
}
func (m *PathExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PathExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PathExistsResponse proto.InternalMessageInfo

func (m *PathExistsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isPathExistsResponse_Error interface {
	isPathExistsResponse_Error()
}

type PathExistsResponse_CmdletError struct {
	CmdletError *api.CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3,oneof"`
}

type PathExistsResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*PathExistsResponse_CmdletError) isPathExistsResponse_Error() {}

func (*PathExistsResponse_ErrorMessage) isPathExistsResponse_Error() {}

func (m *PathExistsResponse) GetError() isPathExistsResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PathExistsResponse) GetCmdletError() *api.CmdletError {
	if x, ok := m.GetError().(*PathExistsResponse_CmdletError); ok {
		return x.CmdletError
	}
	return nil
}

func (m *PathExistsResponse) GetErrorMessage() string {
	if x, ok := m.GetError().(*PathExistsResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

func (m *PathExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PathExistsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PathExistsResponse_CmdletError)(nil),
		(*PathExistsResponse_ErrorMessage)(nil),
	}
}

type MkdirRequest struct {
	// The path to create in the host filesystem.
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	// Non-existent parent directories in the path will NOT be created.
	// Directories will be created with Read and Write privileges of the Windows
	// User account under which csi-proxy is started (typically LocalSystem).
	//
	// Restrictions:
	// If given an absolute path, it needs to be under kubelet-csi-plugins-path
	// or kubelet-pod-path - based on context, and be specified with drive letter
	// prefix: e.g., "X:\".
	// If given a relative path, it will be understood as being relative to either
	// kubelet-csi-plugins-path or kubelet-pod-path - again based on context.
	// Cannot already exist on host.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Maximum path length will be capped to 260 characters (MAX_PATH).
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Context of the path creation used for path prefix validation
	Context              PathContext `protobuf:"varint,2,opt,name=context,proto3,enum=PathContext" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MkdirRequest) Reset()         { *m = MkdirRequest{} }
func (m *MkdirRequest) String() string { return proto.CompactTextString(m) }
func (*MkdirRequest) ProtoMessage()    {}
func (*MkdirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{2}
}

func (m *MkdirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MkdirRequest.Unmarshal(m, b)
}
func (m *MkdirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MkdirRequest.Marshal(b, m, deterministic)
}
func (m *MkdirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MkdirRequest.Merge(m, src)
}
func (m *MkdirRequest) XXX_Size() int {
	return xxx_messageInfo_MkdirRequest.Size(m)
}
func (m *MkdirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MkdirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MkdirRequest proto.InternalMessageInfo

func (m *MkdirRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MkdirRequest) GetContext() PathContext {
	if m != nil {
		return m.Context
	}
	return PathContext_PLUGIN
}

type MkdirResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*MkdirResponse_CmdletError
	//	*MkdirResponse_ErrorMessage
	Error                isMkdirResponse_Error `protobuf_oneof:"error"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MkdirResponse) Reset()         { *m = MkdirResponse{} }
func (m *MkdirResponse) String() string { return proto.CompactTextString(m) }
func (*MkdirResponse) ProtoMessage()    {}
func (*MkdirResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{3}
}

func (m *MkdirResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MkdirResponse.Unmarshal(m, b)
}
func (m *MkdirResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MkdirResponse.Marshal(b, m, deterministic)
}
func (m *MkdirResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MkdirResponse.Merge(m, src)
}
func (m *MkdirResponse) XXX_Size() int {
	return xxx_messageInfo_MkdirResponse.Size(m)
}
func (m *MkdirResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MkdirResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MkdirResponse proto.InternalMessageInfo

func (m *MkdirResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isMkdirResponse_Error interface {
	isMkdirResponse_Error()
}

type MkdirResponse_CmdletError struct {
	CmdletError *api.CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3,oneof"`
}

type MkdirResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*MkdirResponse_CmdletError) isMkdirResponse_Error() {}

func (*MkdirResponse_ErrorMessage) isMkdirResponse_Error() {}

func (m *MkdirResponse) GetError() isMkdirResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *MkdirResponse) GetCmdletError() *api.CmdletError {
	if x, ok := m.GetError().(*MkdirResponse_CmdletError); ok {
		return x.CmdletError
	}
	return nil
}

func (m *MkdirResponse) GetErrorMessage() string {
	if x, ok := m.GetError().(*MkdirResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MkdirResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MkdirResponse_CmdletError)(nil),
		(*MkdirResponse_ErrorMessage)(nil),
	}
}

type RmdirRequest struct {
	// The path to remove in the host filesystem
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// If given an absolute path, it needs to be under kubelet-csi-plugins-path
	// or kubelet-pod-path - based on context, and be specified with drive letter
	// prefix: e.g., "X:\".
	// If given a relative path, it will be understood as being relative to either
	// kubelet-csi-plugins-path or kubelet-pod-path - again based on context.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Path cannot be a file of type symlink.
	// Path needs to be a directory that is empty.
	// Maximum path length will be capped to 260 characters (MAX_PATH).
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Context of the path creation used for path prefix validation
	Context              PathContext `protobuf:"varint,2,opt,name=context,proto3,enum=PathContext" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RmdirRequest) Reset()         { *m = RmdirRequest{} }
func (m *RmdirRequest) String() string { return proto.CompactTextString(m) }
func (*RmdirRequest) ProtoMessage()    {}
func (*RmdirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{4}
}

func (m *RmdirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RmdirRequest.Unmarshal(m, b)
}
func (m *RmdirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RmdirRequest.Marshal(b, m, deterministic)
}
func (m *RmdirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RmdirRequest.Merge(m, src)
}
func (m *RmdirRequest) XXX_Size() int {
	return xxx_messageInfo_RmdirRequest.Size(m)
}
func (m *RmdirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RmdirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RmdirRequest proto.InternalMessageInfo

func (m *RmdirRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RmdirRequest) GetContext() PathContext {
	if m != nil {
		return m.Context
	}
	return PathContext_PLUGIN
}

type RmdirResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*RmdirResponse_CmdletError
	//	*RmdirResponse_ErrorMessage
	Error                isRmdirResponse_Error `protobuf_oneof:"error"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RmdirResponse) Reset()         { *m = RmdirResponse{} }
func (m *RmdirResponse) String() string { return proto.CompactTextString(m) }
func (*RmdirResponse) ProtoMessage()    {}
func (*RmdirResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{5}
}

func (m *RmdirResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RmdirResponse.Unmarshal(m, b)
}
func (m *RmdirResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RmdirResponse.Marshal(b, m, deterministic)
}
func (m *RmdirResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RmdirResponse.Merge(m, src)
}
func (m *RmdirResponse) XXX_Size() int {
	return xxx_messageInfo_RmdirResponse.Size(m)
}
func (m *RmdirResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RmdirResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RmdirResponse proto.InternalMessageInfo

func (m *RmdirResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isRmdirResponse_Error interface {
	isRmdirResponse_Error()
}

type RmdirResponse_CmdletError struct {
	CmdletError *api.CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3,oneof"`
}

type RmdirResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*RmdirResponse_CmdletError) isRmdirResponse_Error() {}

func (*RmdirResponse_ErrorMessage) isRmdirResponse_Error() {}

func (m *RmdirResponse) GetError() isRmdirResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RmdirResponse) GetCmdletError() *api.CmdletError {
	if x, ok := m.GetError().(*RmdirResponse_CmdletError); ok {
		return x.CmdletError
	}
	return nil
}

func (m *RmdirResponse) GetErrorMessage() string {
	if x, ok := m.GetError().(*RmdirResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RmdirResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RmdirResponse_CmdletError)(nil),
		(*RmdirResponse_ErrorMessage)(nil),
	}
}

type LinkPathRequest struct {
	// Source of MkLink call to Windows
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// If given an absolute path, it needs to be under kubelet-pod-path,
	// and specified with drive letter prefix: "X:\".
	// If given a relative path, it will be understood as being relative to
	// kubelet-pod-path.
	// Needs to already exist on host.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Maximum path length will be capped to 260 characters (MAX_PATH).
	SourcePath string `protobuf:"bytes,1,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	// Target of MkLink call to Windows
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// If given an absolute path, it needs to be under kubelet-csi-plugins-path,
	// and specified with drive letter prefix: "X:\".
	// If given a relative path, it will be understood as being relative to
	// kubelet-csi-plugins-path.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Maximum path length will be capped to 260 characters (MAX_PATH).
	TargetPath           string   `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkPathRequest) Reset()         { *m = LinkPathRequest{} }
func (m *LinkPathRequest) String() string { return proto.CompactTextString(m) }
func (*LinkPathRequest) ProtoMessage()    {}
func (*LinkPathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{6}
}

func (m *LinkPathRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkPathRequest.Unmarshal(m, b)
}
func (m *LinkPathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkPathRequest.Marshal(b, m, deterministic)
}
func (m *LinkPathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkPathRequest.Merge(m, src)
}
func (m *LinkPathRequest) XXX_Size() int {
	return xxx_messageInfo_LinkPathRequest.Size(m)
}
func (m *LinkPathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkPathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LinkPathRequest proto.InternalMessageInfo

func (m *LinkPathRequest) GetSourcePath() string {
	if m != nil {
		return m.SourcePath
	}
	return ""
}

func (m *LinkPathRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type LinkPathResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*LinkPathResponse_CmdletError
	//	*LinkPathResponse_ErrorMessage
	Error                isLinkPathResponse_Error `protobuf_oneof:"error"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *LinkPathResponse) Reset()         { *m = LinkPathResponse{} }
func (m *LinkPathResponse) String() string { return proto.CompactTextString(m) }
func (*LinkPathResponse) ProtoMessage()    {}
func (*LinkPathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f798b4e0b3d56780, []int{7}
}

func (m *LinkPathResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkPathResponse.Unmarshal(m, b)
}
func (m *LinkPathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkPathResponse.Marshal(b, m, deterministic)
}
func (m *LinkPathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkPathResponse.Merge(m, src)
}
func (m *LinkPathResponse) XXX_Size() int {
	return xxx_messageInfo_LinkPathResponse.Size(m)
}
func (m *LinkPathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkPathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LinkPathResponse proto.InternalMessageInfo

func (m *LinkPathResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isLinkPathResponse_Error interface {
	isLinkPathResponse_Error()
}

type LinkPathResponse_CmdletError struct {
	CmdletError *api.CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3,oneof"`
}

type LinkPathResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*LinkPathResponse_CmdletError) isLinkPathResponse_Error() {}

func (*LinkPathResponse_ErrorMessage) isLinkPathResponse_Error() {}

func (m *LinkPathResponse) GetError() isLinkPathResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *LinkPathResponse) GetCmdletError() *api.CmdletError {
	if x, ok := m.GetError().(*LinkPathResponse_CmdletError); ok {
		return x.CmdletError
	}
	return nil
}

func (m *LinkPathResponse) GetErrorMessage() string {
	if x, ok := m.GetError().(*LinkPathResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LinkPathResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LinkPathResponse_CmdletError)(nil),
		(*LinkPathResponse_ErrorMessage)(nil),
	}
}

func init() {
	proto.RegisterEnum("PathContext", PathContext_name, PathContext_value)
	proto.RegisterType((*PathExistsRequest)(nil), "PathExistsRequest")
	proto.RegisterType((*PathExistsResponse)(nil), "PathExistsResponse")
	proto.RegisterType((*MkdirRequest)(nil), "MkdirRequest")
	proto.RegisterType((*MkdirResponse)(nil), "MkdirResponse")
	proto.RegisterType((*RmdirRequest)(nil), "RmdirRequest")
	proto.RegisterType((*RmdirResponse)(nil), "RmdirResponse")
	proto.RegisterType((*LinkPathRequest)(nil), "LinkPathRequest")
	proto.RegisterType((*LinkPathResponse)(nil), "LinkPathResponse")
}

func init() { proto.RegisterFile("file_system.proto", fileDescriptor_f798b4e0b3d56780) }

var fileDescriptor_f798b4e0b3d56780 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xb5, 0x4b, 0x9b, 0xb4, 0x13, 0x3b, 0x24, 0x83, 0x84, 0x8c, 0x2f, 0x54, 0x96, 0x80, 0x08,
	0xa9, 0x1b, 0x35, 0x20, 0x71, 0x86, 0x28, 0xd0, 0xa0, 0x36, 0x44, 0x0e, 0x9c, 0x23, 0x67, 0x3b,
	0x24, 0xab, 0xc4, 0xb1, 0xd9, 0x5d, 0xa3, 0xf4, 0x1f, 0x90, 0xf8, 0x0e, 0xbe, 0x89, 0x9f, 0x41,
	0x5e, 0xc7, 0x8a, 0xd3, 0x4a, 0x9c, 0x90, 0xe8, 0xcd, 0xf3, 0xfc, 0x3c, 0x3b, 0xcf, 0xf3, 0xde,
	0x42, 0xfb, 0xab, 0x58, 0xd1, 0x54, 0xdd, 0x28, 0x4d, 0x31, 0x4b, 0x65, 0xa2, 0x13, 0xff, 0xf5,
	0x5c, 0xe8, 0x45, 0x36, 0x63, 0x3c, 0x89, 0xbb, 0xcb, 0x6c, 0x46, 0x72, 0x4d, 0x9a, 0xd4, 0x19,
	0x57, 0xa2, 0xcb, 0x95, 0x38, 0x4b, 0x65, 0xb2, 0xb9, 0xe9, 0x46, 0xa9, 0xe8, 0x92, 0x94, 0x89,
	0x54, 0xc5, 0x57, 0xc1, 0x0b, 0x68, 0x8f, 0x23, 0xbd, 0x18, 0x6c, 0x84, 0xd2, 0x2a, 0xa4, 0x6f,
	0x19, 0x29, 0x8d, 0x08, 0x87, 0x69, 0xa4, 0x17, 0x9e, 0x7d, 0x6a, 0x77, 0x4e, 0x42, 0xf3, 0x1c,
	0xfc, 0xb2, 0x01, 0xab, 0x4c, 0x95, 0x26, 0x6b, 0x45, 0xe8, 0x41, 0x5d, 0x65, 0x9c, 0x93, 0x52,
	0x86, 0x7d, 0x1c, 0x96, 0x25, 0x9e, 0x83, 0xc3, 0xe3, 0xeb, 0x15, 0xe9, 0xa9, 0x39, 0xd0, 0x3b,
	0x38, 0xb5, 0x3b, 0x8d, 0x9e, 0xc3, 0xfa, 0x06, 0x1c, 0xe4, 0xd8, 0x85, 0x15, 0x36, 0xf8, 0xae,
	0xc4, 0x67, 0xe0, 0x1a, 0xee, 0x34, 0x26, 0xa5, 0xa2, 0x39, 0x79, 0x0f, 0xf2, 0x01, 0x2e, 0xac,
	0xd0, 0x31, 0xf0, 0x55, 0x81, 0xe2, 0x63, 0xa8, 0x91, 0x99, 0xc2, 0x3b, 0x34, 0x47, 0x6e, 0xab,
	0x77, 0x75, 0x38, 0x32, 0xbc, 0xe0, 0x23, 0x38, 0x57, 0xcb, 0x6b, 0x21, 0xff, 0xa2, 0x07, 0x9f,
	0x43, 0x9d, 0x27, 0x6b, 0x4d, 0x1b, 0x6d, 0x26, 0x6b, 0xf6, 0x1c, 0x96, 0xcb, 0xeb, 0x17, 0x58,
	0x58, 0xbe, 0x0c, 0x7e, 0xd8, 0xe0, 0x6e, 0x9b, 0xfd, 0x3f, 0xc9, 0x7b, 0xd2, 0xc2, 0xf8, 0x1f,
	0x4a, 0xdb, 0x36, 0xbb, 0x0f, 0xd2, 0x26, 0xf0, 0xf0, 0x52, 0xac, 0x97, 0xf9, 0xa8, 0xa5, 0xba,
	0xa7, 0xd0, 0x50, 0x49, 0x26, 0x39, 0x4d, 0x2b, 0x22, 0xa1, 0x80, 0x72, 0x5e, 0x4e, 0xd0, 0x91,
	0x9c, 0x93, 0x2e, 0x08, 0x07, 0x05, 0xa1, 0x80, 0x72, 0x42, 0xf0, 0xd3, 0x86, 0xd6, 0xae, 0xeb,
	0x3d, 0x90, 0xf9, 0xb2, 0x03, 0x8d, 0xca, 0x36, 0x10, 0xa0, 0x36, 0xbe, 0xfc, 0xf2, 0x61, 0x38,
	0x6a, 0x59, 0xe8, 0xc2, 0x49, 0xff, 0xd3, 0xe8, 0xf3, 0xdb, 0xe1, 0x68, 0x10, 0xb6, 0xec, 0xde,
	0x6f, 0x1b, 0x9e, 0xbc, 0x17, 0x2b, 0x9a, 0x98, 0x98, 0xf7, 0x27, 0xc3, 0x71, 0x9e, 0xe1, 0x09,
	0xc9, 0xef, 0x82, 0x13, 0xbe, 0x01, 0xd8, 0xe5, 0x11, 0x91, 0xdd, 0x89, 0xb1, 0xff, 0x88, 0xdd,
	0x0d, 0x6c, 0x60, 0x61, 0x07, 0x8e, 0x8c, 0xa1, 0xd1, 0x65, 0xd5, 0x94, 0xf8, 0x4d, 0xb6, 0xe7,
	0xf3, 0x82, 0x69, 0xfc, 0x81, 0x2e, 0xab, 0x9a, 0xce, 0x6f, 0xb2, 0x3d, 0xdb, 0x04, 0x16, 0x9e,
	0xc3, 0x71, 0xf9, 0x97, 0xb1, 0xc5, 0x6e, 0xad, 0xd1, 0x6f, 0xb3, 0xdb, 0x2b, 0x08, 0xac, 0x59,
	0xcd, 0x5c, 0x40, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x6b, 0x17, 0x17, 0xcb, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileSystemCSIProxyServiceClient is the client API for FileSystemCSIProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileSystemCSIProxyServiceClient interface {
	// PathExists checks if the given path exists on the host.
	PathExists(ctx context.Context, in *PathExistsRequest, opts ...grpc.CallOption) (*PathExistsResponse, error)
	// Mkdir creates a directory at the requested path on the host.
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	// Rmdir removes the directory at the requested path on the host.
	// This may be used for unlinking a symlink created through LinkVolume.
	Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error)
	// LinkPath invokes mklink on the global staging path of a volume linking it to a path within a container.
	LinkPath(ctx context.Context, in *LinkPathRequest, opts ...grpc.CallOption) (*LinkPathResponse, error)
}

type fileSystemCSIProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileSystemCSIProxyServiceClient(cc *grpc.ClientConn) FileSystemCSIProxyServiceClient {
	return &fileSystemCSIProxyServiceClient{cc}
}

func (c *fileSystemCSIProxyServiceClient) PathExists(ctx context.Context, in *PathExistsRequest, opts ...grpc.CallOption) (*PathExistsResponse, error) {
	out := new(PathExistsResponse)
	err := c.cc.Invoke(ctx, "/FileSystemCSIProxyService/PathExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemCSIProxyServiceClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := c.cc.Invoke(ctx, "/FileSystemCSIProxyService/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemCSIProxyServiceClient) Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error) {
	out := new(RmdirResponse)
	err := c.cc.Invoke(ctx, "/FileSystemCSIProxyService/Rmdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemCSIProxyServiceClient) LinkPath(ctx context.Context, in *LinkPathRequest, opts ...grpc.CallOption) (*LinkPathResponse, error) {
	out := new(LinkPathResponse)
	err := c.cc.Invoke(ctx, "/FileSystemCSIProxyService/LinkPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemCSIProxyServiceServer is the server API for FileSystemCSIProxyService service.
type FileSystemCSIProxyServiceServer interface {
	// PathExists checks if the given path exists on the host.
	PathExists(context.Context, *PathExistsRequest) (*PathExistsResponse, error)
	// Mkdir creates a directory at the requested path on the host.
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	// Rmdir removes the directory at the requested path on the host.
	// This may be used for unlinking a symlink created through LinkVolume.
	Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error)
	// LinkPath invokes mklink on the global staging path of a volume linking it to a path within a container.
	LinkPath(context.Context, *LinkPathRequest) (*LinkPathResponse, error)
}

// UnimplementedFileSystemCSIProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileSystemCSIProxyServiceServer struct {
}

func (*UnimplementedFileSystemCSIProxyServiceServer) PathExists(ctx context.Context, req *PathExistsRequest) (*PathExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathExists not implemented")
}
func (*UnimplementedFileSystemCSIProxyServiceServer) Mkdir(ctx context.Context, req *MkdirRequest) (*MkdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (*UnimplementedFileSystemCSIProxyServiceServer) Rmdir(ctx context.Context, req *RmdirRequest) (*RmdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (*UnimplementedFileSystemCSIProxyServiceServer) LinkPath(ctx context.Context, req *LinkPathRequest) (*LinkPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkPath not implemented")
}

func RegisterFileSystemCSIProxyServiceServer(s *grpc.Server, srv FileSystemCSIProxyServiceServer) {
	s.RegisterService(&_FileSystemCSIProxyService_serviceDesc, srv)
}

func _FileSystemCSIProxyService_PathExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemCSIProxyServiceServer).PathExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystemCSIProxyService/PathExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemCSIProxyServiceServer).PathExists(ctx, req.(*PathExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemCSIProxyService_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemCSIProxyServiceServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystemCSIProxyService/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemCSIProxyServiceServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemCSIProxyService_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemCSIProxyServiceServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystemCSIProxyService/Rmdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemCSIProxyServiceServer).Rmdir(ctx, req.(*RmdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemCSIProxyService_LinkPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemCSIProxyServiceServer).LinkPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystemCSIProxyService/LinkPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemCSIProxyServiceServer).LinkPath(ctx, req.(*LinkPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileSystemCSIProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileSystemCSIProxyService",
	HandlerType: (*FileSystemCSIProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PathExists",
			Handler:    _FileSystemCSIProxyService_PathExists_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _FileSystemCSIProxyService_Mkdir_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _FileSystemCSIProxyService_Rmdir_Handler,
		},
		{
			MethodName: "LinkPath",
			Handler:    _FileSystemCSIProxyService_LinkPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_system.proto",
}
